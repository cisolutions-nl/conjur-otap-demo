---
name: Dev App CI/CD Pipeline Build
on:
  pull_request:
    branches:
      - development

concurrency:
  group: ci-cd-global
  cancel-in-progress: false

jobs:
  black:
    name: Black code check
    runs-on: proxnuccis19
    steps:
      - name: Black code check
        run: |
          echo "Black code check"
  flake8:
    name: Flake8 code check
    runs-on: proxnuccis19
    steps:
      - name: Flake8 code check
        run: |
          echo "Flake8 code check"
  yaml-lint:
    name: Yamllint code check
    runs-on: proxnuccis19
    container:
      image: python:3.11-slim
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Install Yamllint
        run: pip install --no-cache-dir yamllint==1.35.1
      - name: Run Yamllint
        run: yamllint .

  conjur-policy-dryrun:
    name: Conjur Policy DryRun
    runs-on: proxnuccis19
    needs: [black, flake8, yaml-lint]
    steps:
      - name: Import Secrets using CyberArk Conjur Secret Fetcher Action  # yamllint disable-line rule:line-length
        uses: cyberark/conjur-action@v2.0.5
        with:
          url: ${{ vars.CONJUR_URL_INTERNAL }}
          account: ${{ vars.CONJUR_ACCOUNT }}
          host_id: ${{ vars.CONJUR_HOST_USERNAME }}
          api_key: ${{ secrets.CONJUR_HOST_API_KEY }}
          secrets: ${{ vars.CONJUR_USERNAME_PATH }}|conjur_username;${{ vars.CONJUR_PASSWORD_PATH }}|conjur_password  # yamllint disable-line rule:line-length
          certificate: ${{ vars.CONJUR_CERT }}
      - name: Check out code from GitHub
        uses: actions/checkout@v4
        with:
          path: ${{ github.sha }}
      - name: Conjur CLI init
        run: |
          cd ${{ github.sha }}
          mv lib/conjur-cli-go_8.0.19_linux_amd64 conjur
          chmod +x conjur
          ./conjur --version
          echo "yes" | ./conjur init \
            -u ${{ vars.CONJUR_URL_INTERNAL }} \
            -a ${{ vars.CONJUR_ACCOUNT }} \
            --force \
            --self-signed
          ./conjur login -i $CONJUR_USERNAME -p $CONJUR_PASSWORD
          ./conjur whoami
      - name: Set environment
        id: set_environment
        run: |
          if [[ $GITHUB_REF == 'refs/heads/development' ]]; then
            echo "environment=development" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == 'refs/heads/test' ]]; then
            echo "environment=test" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == 'refs/heads/acceptance' ]]; then
            echo "environment=acceptance" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "environment=production" >> $GITHUB_ENV
          else
            echo "environment=development" >> $GITHUB_ENV
          fi
      - name: Conjur Policy DryRun
        run: |
          cd ${{ github.sha }}
          ./conjur policy update -b demo -f policies/root.yml --dry-run
          ./conjur policy update -b demo/${{ env.environment }} -f policies/root.branch.yml --dry-run
          ./conjur policy update -b demo/${{ env.environment }} -f <(cat policies/workloads/*) --dry-run
      - name: Conjur CLI logout
        run: |
          cd ${{ github.sha }}
          ./conjur logout

  unit-tests:
    name: Run Unit Tests
    runs-on: proxnuccis19
    needs: [conjur-policy-dryrun]
    steps:
      - name: Unit tests
        run: |
          echo "Running unit tests for environment: ${{ env.environment }}"

  integration-tests:
    name: Run Integration Tests
    runs-on: proxnuccis19
    needs: [conjur-policy-dryrun]
    steps:
      - name: Integration tests
        run: |
          echo "Running integration tests for environment: ${{ env.environment }}"

  build-image:
    name: Build Application
    runs-on: proxnuccis19
    needs: [unit-tests, integration-tests]
    steps:
      - name: build-image
        run: |
          echo "Build image for environment: ${{ env.environment }}"

  tag-and-push-image:
    name: Tag and Push Image
    runs-on: proxnuccis19
    needs: [build-image]
    steps:
      - name: tag-and-push-image
        run: |
          echo "Tag and push image for environment: ${{ env.environment }}"

  retrieve-scan-results-image:
    name: Retrieve Scan Results Image
    runs-on: proxnuccis19
    needs: [tag-and-push-image]
    steps:
      - name: retrieve-scan-results-image
        run: |
          echo "Retrieve scan results image for environment: ${{ env.environment }}"
